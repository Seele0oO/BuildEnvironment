name: Docker Build and Push

on:
  workflow_dispatch:  # 手动触发
  push:
    branches: [ "master" ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "master" ]

env:
  REGISTRY: docker.io
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  REPOSITORY_NAME: buildenvironment

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      - name: Log into Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          # 遍历 docker 目录下的所有子目录
          for dir in docker/*/; do
            # 获取子目录名作为标签（去除路径前缀和尾部斜杠）
            tag=$(basename "${dir%/}")
            full_image_name="${{ env.DOCKER_HUB_USERNAME }}/${{ env.REPOSITORY_NAME }}:${tag}"
            
            # 检查是否存在 Dockerfile.lock
            if [ -f "${dir}Dockerfile.lock" ]; then
              echo "Skipping build for ${full_image_name} due to Dockerfile.lock presence"
              continue
            fi
            
            echo "Building and pushing: $full_image_name"
            echo "Using Dockerfile from: $dir/Dockerfile"
            
            if [ -f "${dir}Dockerfile" ]; then
              docker buildx build \
                --push \
                --tag "$full_image_name" \
                --file "${dir}Dockerfile" \
                --cache-from "type=gha" \
                --cache-to "type=gha,mode=max" \
                .
            else
              echo "Error: Dockerfile not found in ${dir}"
              exit 1
            fi
          done
